// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: tenant.proto

// This Protocol Buffer describes the service for managing multi-tenancy.

package minerva_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tenant_Index_FullMethodName      = "/Tenant.Tenant/index"
	Tenant_Show_FullMethodName       = "/Tenant.Tenant/show"
	Tenant_ShowBySlug_FullMethodName = "/Tenant.Tenant/showBySlug"
	Tenant_Exists_FullMethodName     = "/Tenant.Tenant/exists"
	Tenant_Store_FullMethodName      = "/Tenant.Tenant/store"
	Tenant_Update_FullMethodName     = "/Tenant.Tenant/update"
	Tenant_Disable_FullMethodName    = "/Tenant.Tenant/disable"
)

// TenantClient is the client API for Tenant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantClient interface {
	// List all companies, given a page index.
	Index(ctx context.Context, in *PageIndex, opts ...grpc.CallOption) (*CompanyList, error)
	// Show a specific company, given its index.
	Show(ctx context.Context, in *EntityIndex, opts ...grpc.CallOption) (*Company, error)
	// Show a specific company, given its unique slug identifier.
	ShowBySlug(ctx context.Context, in *EntityIndex, opts ...grpc.CallOption) (*Company, error)
	// Checks whether a company exists, given its index.
	Exists(ctx context.Context, in *EntityIndex, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// Include a new company and return it.
	Store(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error)
	// Update a company and return it.
	Update(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error)
	// Disable a company.
	Disable(ctx context.Context, in *EntityIndex, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tenantClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantClient(cc grpc.ClientConnInterface) TenantClient {
	return &tenantClient{cc}
}

func (c *tenantClient) Index(ctx context.Context, in *PageIndex, opts ...grpc.CallOption) (*CompanyList, error) {
	out := new(CompanyList)
	err := c.cc.Invoke(ctx, Tenant_Index_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) Show(ctx context.Context, in *EntityIndex, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, Tenant_Show_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) ShowBySlug(ctx context.Context, in *EntityIndex, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, Tenant_ShowBySlug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) Exists(ctx context.Context, in *EntityIndex, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, Tenant_Exists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) Store(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, Tenant_Store_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) Update(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, Tenant_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) Disable(ctx context.Context, in *EntityIndex, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Tenant_Disable_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantServer is the server API for Tenant service.
// All implementations must embed UnimplementedTenantServer
// for forward compatibility
type TenantServer interface {
	// List all companies, given a page index.
	Index(context.Context, *PageIndex) (*CompanyList, error)
	// Show a specific company, given its index.
	Show(context.Context, *EntityIndex) (*Company, error)
	// Show a specific company, given its unique slug identifier.
	ShowBySlug(context.Context, *EntityIndex) (*Company, error)
	// Checks whether a company exists, given its index.
	Exists(context.Context, *EntityIndex) (*wrapperspb.BoolValue, error)
	// Include a new company and return it.
	Store(context.Context, *Company) (*Company, error)
	// Update a company and return it.
	Update(context.Context, *Company) (*Company, error)
	// Disable a company.
	Disable(context.Context, *EntityIndex) (*emptypb.Empty, error)
	mustEmbedUnimplementedTenantServer()
}

// UnimplementedTenantServer must be embedded to have forward compatible implementations.
type UnimplementedTenantServer struct {
}

func (UnimplementedTenantServer) Index(context.Context, *PageIndex) (*CompanyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedTenantServer) Show(context.Context, *EntityIndex) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedTenantServer) ShowBySlug(context.Context, *EntityIndex) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBySlug not implemented")
}
func (UnimplementedTenantServer) Exists(context.Context, *EntityIndex) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedTenantServer) Store(context.Context, *Company) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedTenantServer) Update(context.Context, *Company) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTenantServer) Disable(context.Context, *EntityIndex) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedTenantServer) mustEmbedUnimplementedTenantServer() {}

// UnsafeTenantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantServer will
// result in compilation errors.
type UnsafeTenantServer interface {
	mustEmbedUnimplementedTenantServer()
}

func RegisterTenantServer(s grpc.ServiceRegistrar, srv TenantServer) {
	s.RegisterService(&Tenant_ServiceDesc, srv)
}

func _Tenant_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).Index(ctx, req.(*PageIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_Show_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).Show(ctx, req.(*EntityIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_ShowBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).ShowBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_ShowBySlug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).ShowBySlug(ctx, req.(*EntityIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).Exists(ctx, req.(*EntityIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).Store(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).Update(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).Disable(ctx, req.(*EntityIndex))
	}
	return interceptor(ctx, in, info, handler)
}

// Tenant_ServiceDesc is the grpc.ServiceDesc for Tenant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tenant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Tenant.Tenant",
	HandlerType: (*TenantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "index",
			Handler:    _Tenant_Index_Handler,
		},
		{
			MethodName: "show",
			Handler:    _Tenant_Show_Handler,
		},
		{
			MethodName: "showBySlug",
			Handler:    _Tenant_ShowBySlug_Handler,
		},
		{
			MethodName: "exists",
			Handler:    _Tenant_Exists_Handler,
		},
		{
			MethodName: "store",
			Handler:    _Tenant_Store_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Tenant_Update_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _Tenant_Disable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenant.proto",
}
